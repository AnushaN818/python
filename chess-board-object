# Here is the board class; it has two attributes, knight and pawns; each piece is a pair of numbers between 0 and 7
class Board:
	def __init__(self, pieces):
		self.knight = pieces[0]
		self.pawns = pieces[1:]

	# prints board as 8 strings, 1 per line, with optional heading
	def printBoard(self, heading=""):
		if (heading):
			print(heading)
		board = [" - - - - - - - -"]*8
		(x,y) = self.knight
		row = board[x]
		board[x] = row[0:2*y+1] + "X" + row[2*y+2:]
		for (x,y) in self.pawns:
			row = board[x]
			board[x] = row[0:2*y+1] + "o" + row[2*y+2:]
		for row in board[:]:
			print(row)

	# returns list of knight moves that will eat a pawn, if any
	def findGoodMoves(self):
 		(x0, y0) = self.knight
		moves = [(2,1), (2,-1), (-2,1), (-2,-1), (1,2), (1,-2), (-1,2), (-1,-2)]
		goodMoves = []
		for (x, y) in moves:
			(x1, y1) = (x0 + x, y0 + y)
			#print ("trying move ", x, y)
			if (x1, y1) in self.pawns:
				goodMoves += [(x, y)]
		return goodMoves

	# returns a new board that's a copy of this one
	def copyBoard(self):
		newBoard = Board([self.knight]+self.pawns)
		return newBoard

	#given a board and a move, compute the next board
	def applyMove(self, move):
		(x0, y0) = self.knight
		(x, y) = move
		if ((x0 + x) >= 0 and (y0 + y) >= 0) and ((x0 + x) < 8 and (y0 + y) < 8):
			self.knight = (x0 + x, y0 + y)
			if self.knight in self.pawns:
				self.pawns.remove(self.knight)
			return True
		else:
			return False

	## Part 1
	def printGoodMovesBoard(self):
		goodMoves = self.findGoodMoves()
		for move in goodMoves:
			(x0, y0) = self.knight
			(x, y) = move
			if ((x0 + x) >= 0 and (y0 + y) >= 0) and ((x0 + x) < 8 and (y0 + y) < 8):
				self.knight = (x0 + x, y0 + y)
				if self.knight in self.pawns:
					self.pawns.remove(self.knight)
					self.printBoard("Board with move " + str((x+1, y+1)))
					self.pawns.append(self.knight)
					self.knight = (x0, y0)
				else:
					self.printBoard("Board with move " + str((x+1, y+1)))
			
	def printAllMovesBoard(self):
		moves = [(2,1), (2,-1), (-2,1), (-2,-1), (1,2), (1,-2), (-1,2), (-1,-2)]
		for (x, y) in moves:
			(x0, y0) = self.knight
			final = (xf, yf) = (x0+x, y0 + y)
			if ((xf) >= 0 and (yf) >= 0) and ((xf) < 8 and (yf)<8):
				self.knight = final
				if (xf,yf) in self.pawns:
					self.pawns.remove(self.knight)
					print("")
					self.printBoard("Board with move " + str((x+1, y+1)))
					self.pawns.append((xf,yf))
					self.knight = (x0,y0)
				else:
					print("")
					self.printBoard("Board with move " + str((x+1, y+1)))
					self.knight = (x0,y0)
			else:
				print("")
				print("Invalid move: " + str((x+1,y+1)))
## Part 2
def dfsCapture(board):
	goodMoves = board.findGoodMoves()
	capture = False
	if (len(board.pawns) == 0):
		return True
	elif (len(goodMoves) == 0):
		return False
	else:
		
		for move in goodMoves:
			newBoard = board.copyBoard()
			newBoard.applyMove(move)
			capture = dfsCapture(newBoard)
		return capture
	
		

def bfsCapture(board):
	q = []
	capture = False
	if (len(board.pawns) == 0):
		return True
	elif (len(goodMoves) == 0):
		return False
	else:
		goodMoves = board.findGoodMoves()
		for move in goodMoves:
			newBoard = board.copyBoard()
			newBoard.applyMove(move)
			q.append(newBoard)
		capture = bfsCapture(newBoard)
		return capture
			

## Part 3
def findPath(board):
	pass

## Part 4
def findAllPaths(board, path=[]):
	pass





