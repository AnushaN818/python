class SortedList:
	def __init__(self, L = [], cmpIn = None):
		pass

	# Selection sort provided to you
	def selectionSort(self):
		for i in range(len(self._L)): 
			min_idx = i 
			for j in range(i+1, len(self._L)):
				if self._L[min_idx] > self._L[j]: 
					min_idx = j
			self._L[i], self._L[min_idx] = self._L[min_idx], self._L[i]

	def add(self, item):
		pass

	def _compare(self, i, j):
		# write your code here

		if i > j:
			return 1
		elif i == j:
			return 0
		else:
			return -1

	def setComparison(self, cmpFunction):
		pass

	def mergeSort(self, L):
	    # write your code here

	    return cost_A + cost_B + cost_m + 1

	def merge(self, A, B, L):
	    pass

	def __contains__(self, item):
		pass

	def __str__(self):
		pass



## DO NOT modify these functions. They are the comparison functions for testing purposes.

def cmpBySum(i, j):
    sum1 = 0
    sum2 = 0
    while i > 0:
        d = i%10
        i = i//10
        sum1 += d
    while j > 0:
        d = j%10
        j = j//10
        sum2 += d
    if sum1 < sum2:
        return -1
    elif sum1 == sum2:
        return 0
    else:
        return 1

def ageCmp(i, j):
	i = i[2]
	j = j[2]
	if i < j:
		return -1
	elif i == j:
		return 0
	else:
		return 1

def nameCmp(x, y):
	x = x[1]
	y = y[1]
	n = min(len(x), len(y))
	for i in range(n):
		if x[i] < y[i]:
			return -1
		elif x[i] > y[i]:
			return 1
		elif i == n-1 and x[i] == y[i]:
			return 0

def stringLenCmp(x, y):
	if len(x) < len(y):
		return -1
	elif len(x) == len(y):
		return 0
	else:
		return 1
